// Mocks generated by Mockito 5.4.4 from annotations
// in display/test/main_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:usb_serial/usb_serial.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [UsbDevice].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsbDevice extends _i1.Mock implements _i2.UsbDevice {
  MockUsbDevice() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get deviceName => (super.noSuchMethod(
        Invocation.getter(#deviceName),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#deviceName),
        ),
      ) as String);

  @override
  _i4.Future<_i2.UsbPort?> create([
    String? type = r'',
    int? iface = -1,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [
            type,
            iface,
          ],
        ),
        returnValue: _i4.Future<_i2.UsbPort?>.value(),
      ) as _i4.Future<_i2.UsbPort?>);
}

/// A class which mocks [UsbPort].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsbPort extends _i1.Mock implements _i2.UsbPort {
  MockUsbPort() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get baudRate => (super.noSuchMethod(
        Invocation.getter(#baudRate),
        returnValue: 0,
      ) as int);

  @override
  int get dataBits => (super.noSuchMethod(
        Invocation.getter(#dataBits),
        returnValue: 0,
      ) as int);

  @override
  int get stopBits => (super.noSuchMethod(
        Invocation.getter(#stopBits),
        returnValue: 0,
      ) as int);

  @override
  int get parity => (super.noSuchMethod(
        Invocation.getter(#parity),
        returnValue: 0,
      ) as int);

  @override
  _i4.Future<bool> open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setDTR(bool? dtr) => (super.noSuchMethod(
        Invocation.method(
          #setDTR,
          [dtr],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setRTS(bool? rts) => (super.noSuchMethod(
        Invocation.method(
          #setRTS,
          [rts],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> write(_i5.Uint8List? data) => (super.noSuchMethod(
        Invocation.method(
          #write,
          [data],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setPortParameters(
    int? baudRate,
    int? dataBits,
    int? stopBits,
    int? parity,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPortParameters,
          [
            baudRate,
            dataBits,
            stopBits,
            parity,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setFlowControl(int? flowControl) => (super.noSuchMethod(
        Invocation.method(
          #setFlowControl,
          [flowControl],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  String dataBitToString() => (super.noSuchMethod(
        Invocation.method(
          #dataBitToString,
          [],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #dataBitToString,
            [],
          ),
        ),
      ) as String);

  @override
  String flowControlToString() => (super.noSuchMethod(
        Invocation.method(
          #flowControlToString,
          [],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #flowControlToString,
            [],
          ),
        ),
      ) as String);

  @override
  String parityToString() => (super.noSuchMethod(
        Invocation.method(
          #parityToString,
          [],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #parityToString,
            [],
          ),
        ),
      ) as String);

  @override
  String stopBitsToString() => (super.noSuchMethod(
        Invocation.method(
          #stopBitsToString,
          [],
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #stopBitsToString,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [UsbSerial].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsbSerial extends _i1.Mock implements _i2.UsbSerial {
  MockUsbSerial() {
    _i1.throwOnMissingStub(this);
  }
}
